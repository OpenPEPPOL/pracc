/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package eu.peppol.pracc

import com.helger.schematron.sch.SchematronResourceSCH
import com.helger.schematron.svrl.jaxb.FailedAssert
import com.helger.schematron.svrl.jaxb.SchematronOutputType
import com.helger.schematron.svrl.jaxb.SuccessfulReport
import groovy.util.logging.Slf4j
import spock.lang.Specification

import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.Schema
import javax.xml.validation.SchemaFactory

import static org.hamcrest.Matchers.*
import static spock.util.matcher.HamcrestSupport.expect

@Slf4j
class SchematronSpecification extends Specification {

    def 'run schematron on instances'() {
        given:
        def schematronFile = new File(schematronFileName)
        if (!schematronFile.exists()) {
            throw new FileNotFoundException(schematronFileName)
        }
        def schematronResource = SchematronResourceSCH.fromFile(schematronFile)

        when:
        def xmlFile = new File(xmlFileName)

        SchematronOutputType result = null
        schematronResource.setAllowForeignElements(true)
        xmlFile.withInputStream { InputStream is ->
            result = schematronResource.applySchematronValidationToSVRL(new StreamSource(is))
        }

        def failedAsserts = result?.getActivePatternAndFiredRuleAndFailedAssert()?.findAll { it instanceof FailedAssert || it instanceof SuccessfulReport }

        then:
        expect failedAsserts.collect { it.id }, is(empty())

        where:
        schematronFileName                                                  | xmlFileName
        'rules/peppol-procurement-procedure-subscription/PEPPOL-T001.sch'   | 'guides/transactions/T001/files/ExpressionOfInterestRequest-instance.xml'
        'rules/peppol-procurement-procedure-subscription/PEPPOL-T002.sch'   | 'guides/transactions/T002/files/ExpressionOfInterestResponse-instance.xml'
        'rules/peppol-tender-status-inquiry/PEPPOL-T003.sch'                | 'guides/transactions/T003/files/TenderStatusRequest-instance.xml'
        'rules/peppol-call-for-tender/PEPPOL-T004.sch'                      | 'guides/transactions/T004/files/call-for-tenders-instance.xml'
        'rules/peppol-tender/PEPPOL-T005.sch'                               | 'guides/transactions/T005/files/tender-instance.xml'
        'rules/peppol-tender/PEPPOL-T006.sch'                               | 'guides/transactions/T006/files/tender-receipt-instance.xml'
        'rules/peppol-call-for-tender-question-and-answers/PEPPOL-T007.sch' | 'guides/transactions/T007/files/TenderingQuestions-doc.xml'
        'rules/peppol-call-for-tender-question-and-answers/PEPPOL-T008.sch' | 'guides/transactions/T008/files/TenderingAnswers-doc.xml'
        'rules/tender-clarification/PEPPOL-T009.sch'                        | 'guides/transactions/T009/files/TenderClarificationRequest-doc.xml'
        'rules/tender-clarification/PEPPOL-T010.sch'                        | 'guides/transactions/T010/files/TenderClarification-doc.xml'
        'rules/peppol-search-notice/PEPPOL-T011.sch'                        | 'guides/transactions/T011/files/ExampleSearchNoticeRequest.xml'
        'rules/peppol-search-notice/PEPPOL-T012.sch'                        | 'guides/transactions/T012/files/ExampleSearchNoticeResponse.xml'
        'rules/peppol-tender-withdrawal/PEPPOL-T013.sch'                    | 'guides/transactions/T013/files/TenderWithdrawal.xml'
        'rules/peppol-tender-withdrawal/PEPPOL-T014.sch'                    | 'guides/transactions/T014/files/TenderWithdrawalReceptionNotification.xml'
        'rules/peppol-publish-notice/PEPPOL-T015.sch'                       | 'guides/transactions/T015/files/ExamplePublishNotice.xml'
        'rules/peppol-publish-notice/PEPPOL-T016.sch'                       | 'guides/transactions/T016/files/ExampleNoticePublicationResponse.xml'
        'rules/peppol-publish-notice/PEPPOL-T016.sch'                       | 'guides/transactions/T016/files/testing/ExampleNoticePublicationResponse-Without_eFroms_Reference.xml'
        'rules/peppol-notify-awarding/PEPPOL-T017.sch'                      | 'guides/transactions/T017/files/NotifyAwarding.xml'
        'rules/peppol-tendering-message-response/PEPPOL-T018.sch'           | 'guides/transactions/T018/files/ExampleTenderingMessageResponseAP.xml'
        'rules/peppol-tendering-message-response/PEPPOL-T018.sch'           | 'guides/transactions/T018/files/ExampleTenderingMessageResponseDL.xml'
        'rules/peppol-tendering-message-response/PEPPOL-T018.sch'           | 'guides/transactions/T018/files/ExampleTenderingMessageResponseBV.xml'
        'rules/peppol-tendering-message-response/PEPPOL-T018.sch'           | 'guides/transactions/T018/files/ExampleTenderingMessageResponseWT.xml'
        'rules/peppol-tendering-message-response/PEPPOL-T018.sch'           | 'guides/transactions/T018/files/ExampleTenderingMessageResponseBWBV.xml'
        'rules/peppol-tendering-message-response/PEPPOL-T018.sch'           | 'guides/transactions/T018/files/ExampleTenderingMessageResponseBWNF.xml'
        'rules/peppol-tendering-message-response/PEPPOL-T018.sch'           | 'guides/transactions/T018/files/ExampleTenderingMessageResponseSV.xml'
        'rules/peppol-qualification/PEPPOL-T019.sch'                        | 'guides/transactions/T019/files/Qualification-doc.xml'
        'rules/peppol-qualification/PEPPOL-T020.sch'                        | 'guides/transactions/T020/files/QualificationReception-doc.xml'
        'rules/peppol-qualification/PEPPOL-T023.sch'                        | 'guides/transactions/T023/files/QualificationResonse.xml'
    }

    def 'run schematron with failing checks'() {
        given:
        def schematronResource = SchematronResourceSCH.fromFile(new File(schematronFileName))

        when:
        def xmlFile = new File(xmlFileName)

        SchematronOutputType result = null
        schematronResource.setAllowForeignElements(true)
        xmlFile.withInputStream { InputStream is ->
            result = schematronResource.applySchematronValidationToSVRL(new StreamSource(is))
        }

        def failedAsserts = result?.getActivePatternAndFiredRuleAndFailedAssert()?.findAll { it instanceof FailedAssert || it instanceof SuccessfulReport }

        then:
        expect failedAsserts.collect { it.id }, containsInAnyOrder(expectedFailureIds.toArray())

        where:
        schematronFileName                            | xmlFileName                                                                                                 || expectedFailureIds
        'rules/peppol-publish-notice/PEPPOL-T016.sch' | 'guides/transactions/T016/files/testing/ExampleNoticePublicationResponse-With_invalid_eFroms_Reference.xml' || ['PEPPOL-T016-R034', 'PEPPOL-T016-R035']
    }

    def 'XSD schema validation'() {

        given:
        def factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI)
        def xsdSource = this.class.classLoader.getResource(xsd)
        Schema schema = loadSchema(factory, xsdSource)
        def validator = schema.newValidator()

        when:
        validator.validate(new StreamSource(new BufferedReader(new FileReader(new File(xml)))))

        then:
        noExceptionThrown()

        where:
        xml                                                                        | xsd
        'guides/transactions/T001/files/ExpressionOfInterestRequest-instance.xml'  | 'xsdrt/maindoc/UBL-ExpressionOfInterestRequest-2.2.xsd'
        'guides/transactions/T002/files/ExpressionOfInterestResponse-instance.xml' | 'xsdrt/maindoc/UBL-ExpressionOfInterestResponse-2.2.xsd'
        'guides/transactions/T003/files/TenderStatusRequest-instance.xml'          | 'xsdrt/maindoc/UBL-TenderStatusRequest-2.2.xsd'
        'guides/transactions/T004/files/call-for-tenders-instance.xml'             | 'xsdrt/maindoc/UBL-CallForTenders-2.2.xsd'
        'guides/transactions/T005/files/tender-instance.xml'                       | 'xsdrt/maindoc/UBL-Tender-2.2.xsd'
        'guides/transactions/T006/files/tender-receipt-instance.xml'               | 'xsdrt/maindoc/UBL-TenderReceipt-2.2.xsd'
        'guides/transactions/T007/files/TenderingQuestions-doc.xml'                | 'xsdrt/maindoc/UBL-Enquiry-2.2.xsd'
        'guides/transactions/T008/files/TenderingAnswers-doc.xml'                  | 'xsdrt/maindoc/UBL-EnquiryResponse-2.2.xsd'
        'guides/transactions/T009/files/TenderClarificationRequest-doc.xml'        | 'xsdrt/maindoc/UBL-Enquiry-2.2.xsd'
        'guides/transactions/T010/files/TenderClarification-doc.xml'               | 'xsdrt/maindoc/UBL-EnquiryResponse-2.2.xsd'
        'guides/transactions/T011/files/ExampleSearchNoticeRequest.xml'            | 'ebXML/query.xsd'
        'guides/transactions/T012/files/ExampleSearchNoticeResponse.xml'           | 'ebXML/query.xsd'
        'guides/transactions/T013/files/TenderWithdrawal.xml'                      | 'xsdrt/maindoc/UBL-TenderWithdrawal-2.2.xsd'
        'guides/transactions/T014/files/TenderWithdrawalReceptionNotification.xml' | 'xsdrt/maindoc/UBL-TenderReceipt-2.2.xsd'
        'guides/transactions/T015/files/ExamplePublishNotice.xml'                  | 'ebXML/lcm.xsd'
        'guides/transactions/T016/files/ExampleNoticePublicationResponse.xml'      | 'xsdrt/maindoc/UBL-ApplicationResponse-2.2.xsd'
        'guides/transactions/T017/files/NotifyAwarding.xml'                        | 'xsdrt/maindoc/UBL-AwardedNotification-2.2.xsd'
        'guides/transactions/T018/files/ExampleTenderingMessageResponseAP.xml'     | 'xsdrt/maindoc/UBL-ApplicationResponse-2.2.xsd'
        'guides/transactions/T018/files/ExampleTenderingMessageResponseDL.xml'     | 'xsdrt/maindoc/UBL-ApplicationResponse-2.2.xsd'
        'guides/transactions/T018/files/ExampleTenderingMessageResponseBV.xml'     | 'xsdrt/maindoc/UBL-ApplicationResponse-2.2.xsd'
        'guides/transactions/T018/files/ExampleTenderingMessageResponseBWBV.xml'   | 'xsdrt/maindoc/UBL-ApplicationResponse-2.2.xsd'
        'guides/transactions/T018/files/ExampleTenderingMessageResponseBWNF.xml'   | 'xsdrt/maindoc/UBL-ApplicationResponse-2.2.xsd'
        'guides/transactions/T018/files/ExampleTenderingMessageResponseSV.xml'     | 'xsdrt/maindoc/UBL-ApplicationResponse-2.2.xsd'
        'guides/transactions/T018/files/ExampleTenderingMessageResponseWT.xml'     | 'xsdrt/maindoc/UBL-ApplicationResponse-2.2.xsd'
        'guides/transactions/T019/files/Qualification-doc.xml'                     | 'xsdrt/maindoc/UBL-TendererQualification-2.2.xsd'
        'guides/transactions/T020/files/QualificationResponse-doc.xml'             | 'xsdrt/maindoc/UBL-TenderReceipt-2.2.xsd'
        'guides/transactions/T021/files/UnsubscribeFromProcedureRequest.xml'       | 'xsdrt/maindoc/UBL-UnsubscribeFromProcedureRequest-2.2.xsd'
        'guides/transactions/T022/files/UnsubscribeFromProcedureResponse.xml'      | 'xsdrt/maindoc/UBL-UnsubscribeFromProcedureResponse-2.2.xsd'
    }

    static final Map<String, Schema> schemaCache = new HashMap<>()

    static Schema loadSchema(SchemaFactory factory, URL xsdSource) {
        if (schemaCache.containsKey(xsdSource.toString())) {
            return schemaCache.get(xsdSource.toString())
        }

        Schema schema = factory.newSchema(xsdSource)
        schemaCache.put(xsdSource.toString(), schema)
        return schema
    }
}
